#!/bin/bash

# Secure Container Setup Script for GenX-FX Trading Platform
# This script has been updated to remove hardcoded secrets and improve security.

set -e

# --- Helper Functions ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }
command_exists() { command -v "$1" >/dev/null 2>&1; }

# --- Pre-flight Check for Secrets ---
print_status "Checking for required environment variables..."
required_vars=("DOCKER_USERNAME" "DOCKER_PASSWORD" "MT5_LOGIN" "MT5_PASSWORD")
missing_vars=()
for var in "${required_vars[@]}"; do
    if [ -z "${!var}" ]; then
        missing_vars+=("$var")
    fi
done

if [ ${#missing_vars[@]} -ne 0 ]; then
    print_error "The following required environment variables are not set: ${missing_vars[*]}"
    echo "Please export them before running this script. Example: export DOCKER_USERNAME='your_user'"
    exit 1
fi
print_success "All required secret environment variables are present."

# --- Dynamic & Secure Configuration ---
print_status "Generating secure passwords and configurations..."
DB_ROOT_PASSWORD=$(openssl rand -hex 16)
DB_PASSWORD=$(openssl rand -hex 16)
GF_ADMIN_PASSWORD=$(openssl rand -hex 16)
SECRET_KEY=$(openssl rand -hex 32)
print_success "Secure passwords and keys generated."

# --- Dependency Installation ---
if ! command_exists docker; then
    print_warning "Docker not found. Installing..."
    curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh
    sudo usermod -aG docker $USER
    print_success "Docker installed. You may need to re-login for group changes to take effect."
else
    print_success "Docker is already installed."
fi

if ! command_exists docker-compose; then
    print_warning "Docker Compose not found. Installing..."
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    print_success "Docker Compose installed."
else
    print_success "Docker Compose is already installed."
fi

# --- Docker Hub Login ---
print_status "Logging into Docker Hub..."
echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
print_success "Logged into Docker Hub successfully."

# --- Environment File Creation ---
print_status "Creating .env file from environment variables..."
cat > .env << EOF
# This file is auto-generated by the setup script.
# Sensitive values are sourced from environment variables or generated dynamically.

# === Docker Hub ===
DOCKER_USERNAME=${DOCKER_USERNAME}
DOCKER_PASSWORD=${DOCKER_PASSWORD}

# === App Credentials ===
MT5_LOGIN=${MT5_LOGIN}
MT5_SERVER=${MT5_SERVER:-"Exness-MT5Trial8"}
MT5_PASSWORD=${MT5_PASSWORD}

# === API Keys (placeholders - set these in your environment) ===
GEMINI_API_KEY=${GEMINI_API_KEY:-"your_gemini_api_key_here"}
ALPHAVANTAGE_API_KEY=${ALPHAVANTAGE_API_KEY:-"your_alpha_api_key_here"}
NEWS_API_KEY=${NEWS_API_KEY:-"your_newsapi_key_here"}
HEROKU_TOKEN=${HEROKU_TOKEN:-"your_heroku_token_here"}

# === Backend Config ===
ENV=production
PORT=8080
DEBUG=false
DATABASE_URL=mysql://genx_user:${DB_PASSWORD}@mysql:3306/genxdb_fx_db

# === Security (Dynamically Generated) ===
SECRET_KEY=${SECRET_KEY}
DB_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
DB_PASSWORD=${DB_PASSWORD}
GF_ADMIN_PASSWORD=${GF_ADMIN_PASSWORD}
EOF
print_success ".env file created."
print_warning "Ensure you have set your API keys as environment variables for them to be included."

# --- Docker Compose Configuration ---
print_status "Creating Docker Compose configuration..."
cat > docker-compose.container.yml << EOF
version: '3.8'
services:
  mysql:
    image: mysql:8.0
    container_name: genxdb_fx_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: \${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: genxdb_fx_db
      MYSQL_USER: genx_user
      MYSQL_PASSWORD: \${DB_PASSWORD}
    ports: ["3306:3306"]
    volumes: ["mysql_data:/var/lib/mysql", "./database/init:/docker-entrypoint-initdb.d"]
    networks: ["genx_network"]
  redis:
    image: redis:7-alpine
    container_name: genxdb_fx_redis
    restart: unless-stopped
    ports: ["6379:6379"]
    volumes: ["redis_data:/data"]
    networks: ["genx_network"]
  api:
    build: { context: ., dockerfile: Dockerfile.api }
    container_name: genxdb_fx_api
    restart: unless-stopped
    env_file: .env
    ports: ["8080:8080"]
    depends_on: [mysql, redis]
    networks: ["genx_network"]
  monitoring:
    image: grafana/grafana:latest
    container_name: genxdb_fx_monitoring
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: \${GF_ADMIN_PASSWORD}
    ports: ["3001:3000"]
    volumes: ["grafana_data:/var/lib/grafana"]
    networks: ["genx_network"]
volumes:
  mysql_data:
  redis_data:
  grafana_data:
networks:
  genx_network:
EOF
print_success "Docker Compose file created."

# --- Dockerfile Creation ---
print_status "Creating Dockerfiles..."
cat > Dockerfile.api << EOF
FROM python:3.11-slim
WORKDIR /app
RUN apt-get update && apt-get install -y gcc g++ && rm -rf /var/lib/apt/lists/*
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY . .
EXPOSE 8080
CMD ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8080"]
EOF
print_success "Dockerfile.api created."

# --- Database Initialization ---
print_status "Creating database initialization script..."
mkdir -p database/init
cat > database/init/01-init.sql << EOF
CREATE DATABASE IF NOT EXISTS genxdb_fx_db;
USE genxdb_fx_db;
CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
-- Add other table schemas here
EOF
print_success "Database init script created."

# --- Build and Run ---
print_status "Building and starting containers..."
docker-compose -f docker-compose.container.yml up -d --build
print_success "Containers are starting in the background."

# --- Final Output ---
print_status "Waiting for services to be ready..."
sleep 30
docker-compose -f docker-compose.container.yml ps

cat > container_deployment_info.txt << EOF
GenX-FX Container Deployment Information
========================================
Deployment Date: $(date)
Services:
- API Backend: http://localhost:8080
- Monitoring (Grafana): http://localhost:3001

Credentials:
- Grafana Admin Password: ${GF_ADMIN_PASSWORD}
- Other passwords are in the .env file and should be handled securely.

Useful Commands:
- View logs: docker-compose -f docker-compose.container.yml logs -f api
- Stop services: docker-compose -f docker-compose.container.yml down
EOF

print_success "Container setup complete!"
echo "Deployment information saved to container_deployment_info.txt"
echo "Grafana Admin Password: ${GF_ADMIN_PASSWORD}"
print_warning "Store this password securely!"
echo "Access the API at: http://localhost:8080/docs"