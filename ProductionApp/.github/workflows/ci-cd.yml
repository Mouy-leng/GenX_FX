name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Test job
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint --if-present
    
    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        TEST_MONGODB_URI: mongodb://localhost:27017/productionapp-test
        JWT_SECRET: test-secret-key-for-ci
    
    - name: Generate test coverage
      run: npm run test:coverage --if-present
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x'
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Security audit
  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=high
    
    - name: Run dependency check
      run: npx audit-ci --config ./audit-ci.json
      continue-on-error: true

  # Build and deploy job
  deploy:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --only=production
    
    - name: Build Docker image
      run: |
        docker build -t productionapp:${{ github.sha }} .
        docker tag productionapp:${{ github.sha }} productionapp:latest
    
    - name: Run security scan on Docker image
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $(pwd):/workspace \
          aquasec/trivy:latest image productionapp:${{ github.sha }}
    
    # Uncomment and configure for your deployment platform
    # - name: Deploy to production
    #   run: |
    #     # Add your deployment commands here
    #     # For example, push to container registry and deploy
    #     echo "Deploying to production..."
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} = 'success' ]; then
          echo "✅ Deployment completed successfully"
        else
          echo "❌ Deployment failed"
        fi

  # Performance testing
  performance:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Start application
      run: |
        npm start &
        sleep 30
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/productionapp-test
        JWT_SECRET: test-secret-key-for-performance
    
    - name: Run performance tests
      run: |
        # Install and run basic performance testing
        npx autocannon http://localhost:3000/health -d 30 -c 10
        npx autocannon http://localhost:3000/ -d 30 -c 10