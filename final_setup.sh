#!/bin/bash

# Final Setup Script for GenX-FX Trading Platform
# Uses a virtual environment and works in the current directory.
# This script has been updated to remove hardcoded secrets.

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${GREEN}🚀 Setting up GenX-FX Trading Platform (Final Secure Setup)${NC}"

# === GitHub Configuration ===
GITHUB_USERNAME="genxdbxfx1"
GITHUB_REPOSITORY="https://github.com/genxdbxfx1-ctrl/GenX_db_FX-.git"

# === App Credentials (placeholders) ===
# IMPORTANT: It is strongly recommended to set these as environment variables for security.
MT5_LOGIN="${MT5_LOGIN:-"your_mt5_login_here"}"
MT5_SERVER="${MT5_SERVER:-"your_mt5_server_here"}"
MT5_PASSWORD="${MT5_PASSWORD:-"your_mt5_password_here"}"

# === API Keys (placeholders) ===
# IMPORTANT: Set these as environment variables.
GEMINI_API_KEY="${GEMINI_API_KEY:-"your_gemini_api_key_here"}"
ALPHAVANTAGE_API_KEY="${ALPHAVANTAGE_API_KEY:-"your_alpha_api_key_here"}"
NEWS_API_KEY="${NEWS_API_KEY:-"your_newsapi_key_here"}"
NEWSDATA_API_KEY="${NEWSDATA_API_KEY:-"your_newsdata_key_here"}"
HEROKU_TOKEN="${HEROKU_TOKEN:-"your_heroku_token_here"}"

# === Backend Config ===
ENV="development"
PORT="8080"
DEBUG="true"
DATABASE_URL="sqlite:///./genxdb_fx.db"

# === Security ===
# Generate a new secret key for this session
SECRET_KEY=$(openssl rand -hex 32)

# Create virtual environment
echo -e "${YELLOW}Creating Python virtual environment...${NC}"
python3 -m venv genx_env
source genx_env/bin/activate
echo -e "${GREEN}✅ Virtual environment 'genx_env' created and activated.${NC}"

# Create environment file
echo -e "${YELLOW}Creating .env file from environment variables...${NC}"
cat > .env << EOF
# This file is auto-generated by the setup script.
# For production, manage these secrets securely (e.g., using a vault or environment variables).

# === GitHub ===
GITHUB_USERNAME=$GITHUB_USERNAME
GITHUB_REPOSITORY=$GITHUB_REPOSITORY

# === App Credentials (replace with your actual credentials) ===
MT5_LOGIN=$MT5_LOGIN
MT5_SERVER=$MT5_SERVER
MT5_PASSWORD=$MT5_PASSWORD

# === API Keys (replace with your actual keys) ===
GEMINI_API_KEY=$GEMINI_API_KEY
ALPHAVANTAGE_API_KEY=$ALPHAVANTAGE_API_KEY
NEWS_API_KEY=$NEWS_API_KEY
NEWSDATA_API_KEY=$NEWSDATA_API_KEY

# === Backend Config ===
ENV=$ENV
PORT=$PORT
DEBUG=$DEBUG
DATABASE_URL=$DATABASE_URL

# === Security ===
SECRET_KEY=$SECRET_KEY

# === Heroku (replace with your actual token) ===
HEROKU_TOKEN=$HEROKU_TOKEN
EOF
echo -e "${GREEN}✅ .env file created successfully.${NC}"
echo -e "${YELLOW}IMPORTANT: Review the .env file and replace placeholder values with your actual secrets.${NC}"

# Install Python dependencies in virtual environment
echo -e "${YELLOW}Installing Python dependencies...${NC}"
pip install --upgrade pip
pip install fastapi uvicorn sqlalchemy
echo -e "${GREEN}✅ Python dependencies installed.${NC}"

# Create database setup script
echo -e "${YELLOW}Creating database setup script (setup_database.py)...${NC}"
cat > setup_database.py << EOF
#!/usr/bin/env python3
import sqlite3, logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_database_schema():
    db_path = "genxdb_fx.db"
    logger.info(f"Creating database: {db_path}")
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    # (Schema creation logic remains the same)
    tables_sql = [
        "CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT UNIQUE, email TEXT UNIQUE, password_hash TEXT, is_active BOOLEAN DEFAULT 1)",
        "CREATE TABLE IF NOT EXISTS trading_accounts (id INTEGER PRIMARY KEY, user_id INTEGER, account_name TEXT, broker TEXT, balance REAL, FOREIGN KEY(user_id) REFERENCES users(id))",
        "CREATE TABLE IF NOT EXISTS trading_pairs (id INTEGER PRIMARY KEY, symbol TEXT UNIQUE, base_currency TEXT, quote_currency TEXT)",
        "CREATE TABLE IF NOT EXISTS market_data (id INTEGER PRIMARY KEY, symbol TEXT, timestamp TIMESTAMP, open REAL, high REAL, low REAL, close REAL, volume REAL)",
        "CREATE TABLE IF NOT EXISTS trading_signals (id INTEGER PRIMARY KEY, symbol TEXT, signal_type TEXT, confidence REAL, timestamp TIMESTAMP)",
        "CREATE TABLE IF NOT EXISTS trades (id INTEGER PRIMARY KEY, account_id INTEGER, symbol TEXT, quantity REAL, price REAL, timestamp TIMESTAMP, FOREIGN KEY(account_id) REFERENCES trading_accounts(id))"
    ]
    for sql in tables_sql:
        cursor.execute(sql)
    logger.info("Tables created.")
    initial_data = [
        "INSERT OR IGNORE INTO users (username, email, password_hash) VALUES ('admin', 'admin@genx.com', 'placeholder')",
        "INSERT OR IGNORE INTO trading_pairs (symbol, base_currency, quote_currency) VALUES ('EUR/USD', 'EUR', 'USD')"
    ]
    for sql in initial_data:
        cursor.execute(sql)
    logger.info("Initial data inserted.")
    conn.commit()
    conn.close()

if __name__ == "__main__":
    create_database_schema()
    logger.info("Database setup complete!")
EOF
echo -e "${GREEN}✅ Database setup script created.${NC}"

# Setup database
echo -e "${YELLOW}Setting up SQLite database...${NC}"
python setup_database.py
echo -e "${GREEN}✅ Database setup complete.${NC}"

# Create startup script
echo -e "${YELLOW}Creating startup script (start_trading_platform.sh)...${NC}"
cat > start_trading_platform.sh << EOF
#!/bin/bash
echo "🚀 Starting GenX-FX Trading Platform..."
source genx_env/bin/activate
if [ ! -f "genxdb_fx.db" ]; then
    echo "📊 Database not found. Setting up..."
    python setup_database.py
fi
echo "🌐 Starting API server on port 8080..."
python -m uvicorn api.main:app --host 0.0.0.0 --port 8080 --reload
EOF
chmod +x start_trading_platform.sh
echo -e "${GREEN}✅ Startup script created.${NC}"

# Create a simple test API if it doesn't exist
if [ ! -f "api/main.py" ]; then
    echo -e "${YELLOW}Creating simple test API (api/main.py)...${NC}"
    mkdir -p api
    cat > api/main.py << EOF
from fastapi import FastAPI
app = FastAPI(title="GenX-FX API")
@app.get("/")
def root():
    return {"message": "GenX-FX API is running"}
@app.get("/health")
def health():
    return {"status": "healthy"}
EOF
    echo -e "${GREEN}✅ Test API created.${NC}"
fi

# Create deployment info file
cat > final_deployment_info.txt << EOF
GenX-FX Trading Platform Final Deployment
=========================================
Deployment Date: $(date)
GitHub Repository: $GITHUB_REPOSITORY

Services:
- SQLite Database: genxdb_fx.db
- API Backend: localhost:8080
- Virtual Environment: genx_env/

Credentials:
- Admin User: admin@genx.com (password is a placeholder)
- MT5 Login: \${MT5_LOGIN} (from environment)
- MT5 Server: \${MT5_SERVER} (from environment)
- MT5 Password: [SET VIA ENVIRONMENT VARIABLE]

Useful Commands:
- Start platform: ./start_trading_platform.sh
- Activate environment: source genx_env/bin/activate
- View database: sqlite3 genxdb_fx.db
- API docs: http://localhost:8080/docs
EOF
echo -e "${GREEN}✅ Final deployment info file created.${NC}"

echo -e "${GREEN}✅ Final setup complete!${NC}"
echo -e "${YELLOW}🚀 To start the platform, run: ./start_trading_platform.sh${NC}"
echo -e "${BLUE}📚 API documentation will be at: http://localhost:8080/docs${NC}"