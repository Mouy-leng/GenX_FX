name: Docker Build & Security Check

on:
  schedule:
    - cron: '41 8 * * *'
  push:
    branches: [ "main", "master", "cursor/check-docker-and-container-registration-status-5116", "feature/fxcm-integration-with-spreadsheet" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:

env:
  # Use Docker Hub
  REGISTRY: docker.io
  # Your Docker Hub image name
  IMAGE_NAME: keamouyleng/genx-fx

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up BuildKit Docker container builder
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to Docker Hub
      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Extract metadata for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      # Build and push Docker image
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          push: ${{ github.event_name != 'pull_request' }}
         
       - name: Run Trivy vulnerability scanner
         uses: aquasecurity/trivy-action@master
         with:
           image-ref: 'keamouyleng/genx-fx:latest'
           format: 'sarif'
           output: 'trivy-results.sarif'
       
       - name: Upload Trivy scan results
         uses: github/codeql-action/upload-sarif@v2
         with:
           sarif_file: 'trivy-results.sarif'
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # Output image digest
      - name: Image digest
        run: echo ${{ steps.build-and-push.outputs.digest }}
