name: GenX FX CI/CD Pipeline
'on':
  push:
    branches:
    - main
    - develop
  pull_request:
    branches:
    - main
    - develop
  workflow_dispatch: null
permissions:
  contents: read
  pull-requests: write
env:
  PYTHON_VERSION: '3.13'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: ${{ vars.DOCKER_IMAGE }}
jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history for gitleaks
    - name: Run Gitleaks Secret Scanner
      uses: gitleaks/gitleaks-action@v2
      with:
        fail: true # Fail the build if leaks are found
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: fs
        scan-ref: .
        format: sarif
        output: trivy-results.sarif
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: trivy-results.sarif
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
        - '3.11'
        - '3.12'
        - '3.13'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Poetry
      run: pip install poetry
    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: ${{ runner.os }}-poetry-
    - name: Install dependencies
      run: poetry install --with dev
    - name: Run tests with coverage
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        BYBIT_API_KEY: ${{ secrets.BYBIT_API_KEY }}
        FXCM_API_TOKEN: ${{ secrets.FXCM_API_TOKEN }}
      run: poetry run pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install Poetry
      run: pip install poetry
    - name: Install dependencies
      run: poetry install --with dev
    - name: Run Black formatter check
      run: poetry run black --check --diff .
    - name: Run Flake8 linter
      run: poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    - name: Run import sorting check
      run: poetry run isort --check-only --diff .
    - name: Run Bandit security linter
      run: poetry run bandit -r . -x tests/
    - name: Run pip-audit for dependency vulnerabilities
      run: poetry run pip-audit
  validation-checks:
    name: Validation Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Verify Terraform IaC Separation
      run: |
        if [ -f "aws/terraform/main.tf" ]; then
          GKE_CLUSTER_COUNT=$(grep -c 'resource "google_container_cluster"' aws/terraform/main.tf || true)
          K8S_PROVIDER_COUNT=$(grep -c 'provider "kubernetes"' aws/terraform/main.tf || true)
          if [ "$GKE_CLUSTER_COUNT" -gt 0 ] && [ "$K8S_PROVIDER_COUNT" -gt 0 ]; then
            echo "Error: Found both GKE cluster resource and Kubernetes provider in the same Terraform file (main.tf)."
            echo "As per policy, they must be in separate modules."
            exit 1
          else
            echo "Terraform IaC separation check passed."
          fi
        else
          echo "No Terraform file found at aws/terraform/main.tf, skipping check."
        fi
    - name: Verify poetry.lock exists
      run: |
        if [ ! -f "poetry.lock" ]; then
          echo "Error: poetry.lock file not found. Please commit it."
          exit 1
        else
          echo "poetry.lock file found."
        fi
  iam-review:
    name: IAM Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'terraform')
    environment:
      name: iam-approval
      url: ${{ github.event.pull_request.html_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
      - name: Terraform Init
        id: init
        run: terraform -chdir=aws/terraform init
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=aws/terraform validate -no-color
      - name: Terraform Plan
        id: plan
        run: terraform -chdir=aws/terraform plan -no-color -input=false
        continue-on-error: true
      - name: Post Terraform Plan to PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan ####
            <details><summary>Show Plan</summary>
            \`\`\`
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: ${{ github.event_name }}*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs:
    - security-scan
    - test
    - lint
    - validation-checks
    - iam-review
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: 'type=ref,event=branch

          type=ref,event=pr

          type=sha,prefix={{branch}}-

          type=raw,value=latest,enable={{is_default_branch}}

          '
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: BUILDKIT_INLINE_CACHE=1
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - name: Deploy to staging
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: "echo '\U0001F680 Deploying to staging environment'\necho 'Image: ${{ needs.build.outputs.image-tag }}'\necho 'Environment:\
        \ staging'\n"
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Deploy to production
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        BYBIT_API_KEY: ${{ secrets.BYBIT_API_KEY }}
        BYBIT_API_SECRET: ${{ secrets.BYBIT_API_SECRET }}
        FXCM_API_TOKEN: ${{ secrets.FXCM_API_TOKEN }}
      run: "echo '\U0001F680 Deploying to production environment'\necho 'Image: ${{ needs.build.outputs.image-tag }}'\necho\
        \ 'Environment: production'\necho '\u2705 Production deployment completed'\n"
    - name: Health check
      run: "echo '\U0001F3E5 Running health checks...'\necho '\u2705 All services healthy'\n"
