name: Run Tests and Quality Checks
on: 
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]

jobs:
  test:
    name: Python Tests & Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
          
      - name: Run tests with coverage
        run: |
          pytest tests/ --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          
      - name: Run linting checks
        run: |
          echo "Running code quality checks..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check --diff .
          isort --check-only --diff .
          
      - name: Security scan
        run: |
          echo "Running security checks..."
          pip install bandit safety
          bandit -r . -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true
          
      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/
            bandit-report.json
            safety-report.json
            .pytest_cache/
            
  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Test Docker build
        run: |
          echo "Testing Docker build..."
          docker build --target test -f Dockerfile.production . || true
          echo "Docker build test completed"
          
      - name: Test Docker compose
        run: |
          echo "Testing Docker compose..."
          docker-compose -f docker-compose.yml config || true
          echo "Docker compose test completed"