name: GitHub Token AWS Deployment

on:
  push:
    branches: [ main, aws-deployment-clean ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - development
        - staging
        - production
      region:
        description: 'AWS region'
        required: true
        default: 'us-east-1'
        type: string
      auto_approve:
        description: 'Auto-approve deployment'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: ${{ github.event.inputs.region || 'us-east-1' }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: read
  id-token: write
  pull-requests: write
  deployments: write
  security-events: write

jobs:
  security-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ env.GITHUB_TOKEN }}
    
    - name: Run security scan
      uses: github/codeql-action/init@v2
      with:
        languages: python, javascript
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
    
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json

  test:
    runs-on: ubuntu-latest
    needs: security-check
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ env.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=core --cov=api --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        token: ${{ env.GITHUB_TOKEN }}

  build:
    needs: [test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/aws-deployment-clean'
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ env.GITHUB_TOKEN }}
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: GitHubActions-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push Docker images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build main API image
        docker build -f Dockerfile.production -t $ECR_REGISTRY/genx-api:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/genx-api:$IMAGE_TAG $ECR_REGISTRY/genx-api:latest
        docker push $ECR_REGISTRY/genx-api:$IMAGE_TAG
        docker push $ECR_REGISTRY/genx-api:latest
        
        # Build Discord bot image
        docker build -f Dockerfile.discord -t $ECR_REGISTRY/genx-discord-bot:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/genx-discord-bot:$IMAGE_TAG $ECR_REGISTRY/genx-discord-bot:latest
        docker push $ECR_REGISTRY/genx-discord-bot:$IMAGE_TAG
        docker push $ECR_REGISTRY/genx-discord-bot:latest
        
        # Build Telegram bot image
        docker build -f Dockerfile.telegram -t $ECR_REGISTRY/genx-telegram-bot:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/genx-telegram-bot:$IMAGE_TAG $ECR_REGISTRY/genx-telegram-bot:latest
        docker push $ECR_REGISTRY/genx-telegram-bot:$IMAGE_TAG
        docker push $ECR_REGISTRY/genx-telegram-bot:latest
        
        echo "image=$ECR_REGISTRY/genx-api:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/aws-deployment-clean'
    environment: ${{ env.ENVIRONMENT }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ env.GITHUB_TOKEN }}
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: GitHubActions-${{ github.run_id }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy to AWS using CloudFormation
      run: |
        chmod +x deploy/aws-deploy.sh
        ./deploy/aws-deploy.sh \
          --region ${{ env.AWS_REGION }} \
          --environment ${{ env.ENVIRONMENT }} \
          --auto-approve ${{ github.event.inputs.auto_approve }}
    
    - name: Get deployment outputs
      run: |
        STACK_NAME="${{ env.ENVIRONMENT }}-genx-trading-platform"
        ALB_DNS=$(aws cloudformation describe-stacks \
          --stack-name "$STACK_NAME" \
          --region "${{ env.AWS_REGION }}" \
          --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
          --output text)
        echo "Application URL: http://$ALB_DNS"
        echo "ALB_DNS=$ALB_DNS" >> $GITHUB_ENV
    
    - name: Create deployment status
      uses: actions/github-script@v6
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: '${{ env.ENVIRONMENT }}',
            description: 'Deployment to AWS ${{ env.ENVIRONMENT }}',
            auto_merge: false,
            required_contexts: [],
          });
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'success',
            environment_url: 'http://${{ env.ALB_DNS }}',
            description: 'Deployment successful',
          });
    
    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        text: |
          GenX Trading Platform deployment to AWS ${{ env.ENVIRONMENT }}
          Status: ${{ job.status }}
          URL: http://${{ env.ALB_DNS }}
          Commit: ${{ github.sha }}

  post-deployment:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Health check
      run: |
        echo "Performing health check on deployed application..."
        # Add your health check logic here
        sleep 30
    
    - name: Update deployment status
      uses: actions/github-script@v6
      if: always()
      with:
        script: |
          const deployments = await github.rest.repos.listDeployments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            environment: '${{ env.ENVIRONMENT }}',
            per_page: 1,
          });
          
          if (deployments.data.length > 0) {
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployments.data[0].id,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              environment_url: 'http://${{ env.ALB_DNS }}',
              description: 'Post-deployment verification complete',
            });
          }