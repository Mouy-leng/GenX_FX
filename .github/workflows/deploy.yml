name: Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-prod.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key
      run: |
        pytest tests/ -v --cov=. --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to DigitalOcean
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Update DigitalOcean App
      # --force-rebuild is used to ensure new layers are picked up if the underlying base image changed.
      run: |
        doctl apps create-deployment ${{ secrets.DIGITALOCEAN_APP_ID }} \
          --wait --force-rebuild
    
    - name: Verify deployment
      # Retry curling the health endpoint for up to 5 minutes
      run: |
        echo "Waiting for deployment to be live..."
        for i in {1..30}; do
          if curl -sf "${{ vars.APP_URL }}/health"; then
            echo "Deployment is live!"
            exit 0
          fi
          sleep 10
        done
        echo "Deployment verification failed."
        exit 1
    
    - name: Notify Discord
      if: always()
      uses: sarisia/actions-status-discord@v1
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        title: "GenX Trading Platform Deployment"
        description: "Deployment status: ${{ job.status }}"
        color: ${{ job.status == 'success' && '0x00ff00' || '0xff0000' }}

  deploy-vps:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          set -e

          # Create directory if it doesn't exist
          sudo mkdir -p /opt/genx-trading
          cd /opt/genx-trading

          # Create .env file from secrets
          cat << EOF > .env
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          NEWSDATA_API_KEY=${{ secrets.NEWSDATA_API_KEY }}
          ALPHAVANTAGE_API_KEY=${{ secrets.ALPHAVANTAGE_API_KEY }}
          NEWSAPI_ORG_KEY=${{ secrets.NEWSAPI_ORG_KEY }}
          FINNHUB_API_KEY=${{ secrets.FINNHUB_API_KEY }}
          FMP_API_KEY=${{ secrets.FMP_API_KEY }}
          REDDIT_CLIENT_ID=${{ secrets.REDDIT_CLIENT_ID }}
          REDDIT_CLIENT_SECRET=${{ secrets.REDDIT_CLIENT_SECRET }}
          REDDIT_USERNAME=${{ secrets.REDDIT_USERNAME }}
          REDDIT_PASSWORD=${{ secrets.REDDIT_PASSWORD }}
          BYBIT_API_KEY=${{ secrets.BYBIT_API_KEY }}
          BYBIT_API_SECRET=${{ secrets.BYBIT_API_SECRET }}
          DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}
          TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}
          EOF

          # Log in to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin

          # Pull the latest Docker image
          sudo docker-compose -f docker-compose.production.yml pull
          
          # Restart services
          sudo docker-compose -f docker-compose.production.yml up -d
          
          # Health check
          echo "Waiting for services to be ready..."
          for i in {1..12}; do
            if curl -sf "http://localhost:8000/health"; then
              echo "Services are ready!"
              sudo docker image prune -f
              exit 0
            fi
            sleep 10
          done
          echo "Health check failed."
          exit 1
          
    
    - name: Backup after deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          /usr/local/bin/backup-genx.sh

  performance-test:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run performance tests
      run: |
        # Install k6
        curl -s https://github.com/grafana/k6/releases/download/v0.44.0/k6-v0.44.0-linux-amd64.tar.gz | tar -xz
        sudo mv k6-v0.44.0-linux-amd64/k6 /usr/local/bin/
        
        # Run performance tests
        k6 run tests/performance/api_load_test.js
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results.json

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.20.0
      with:
        # Scan the 'latest' tag which is pushed for the default branch
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-results.json || true
    
    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      with:
        name: security-results
        path: bandit-results.json
